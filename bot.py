from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
import asyncio

API_TOKEN = "–¢–û–ö–ï–ù_–ó–î–ï–°–¨"
ADMINS = [123456789]  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∞
ADMIN_GROUP_ID = -4869342056  # ID –≥—Ä—É–ø–ø—ã —Å –∞–¥–º–∏–Ω–∞–º–∏

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class UserState(StatesGroup):
    waiting = State()
    connected = State()

user_admin_map = {}
admin_user_map = {}

# –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å"))
    await message.answer("üìå –ü—Ä–∞–≤–∏–ª–∞:
‚Äî –ë–µ–∑ 18+
‚Äî –ë–µ–∑ –≤—ã—è—Å–Ω–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏

–ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=markup)
    await UserState.waiting.set()

@dp.message_handler(lambda msg: msg.text == "üöÄ –ù–∞—á–∞—Ç—å", state=UserState.waiting)
async def handle_start_chat(message: types.Message, state: FSMContext):
    for admin_id in ADMINS:
        await bot.send_message(admin_id, f"üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {message.from_user.id}", reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{message.from_user.id}")
        ))
    await bot.send_message(ADMIN_GROUP_ID, f"üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {message.from_user.id}")
    await message.answer("‚è≥ –û–∂–∏–¥–∞–π, –ø–æ–∫–∞ –∞–¥–º–∏–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è...")

@dp.callback_query_handler(lambda c: c.data.startswith("accept_"))
async def accept_chat(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    admin_id = callback.from_user.id

    if admin_id in admin_user_map:
        await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        return

    user_admin_map[user_id] = admin_id
    admin_user_map[admin_id] = user_id

    await bot.send_message(user_id, "‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è! –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å.")
    await bot.send_message(admin_id, "‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await callback.answer()

    await dp.current_state(user=user_id).set_state(UserState.connected)

@dp.message_handler(lambda msg: msg.text == "‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", state=UserState.connected)
async def stop_chat_user(message: types.Message, state: FSMContext):
    admin_id = user_admin_map.get(message.from_user.id)
    if admin_id:
        await bot.send_message(admin_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.")
        del admin_user_map[admin_id]
        del user_admin_map[message.from_user.id]
    await message.answer("‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    await state.finish()

@dp.message_handler(lambda msg: msg.text == "üîÅ –°–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞", state=UserState.connected)
async def switch_admin(message: types.Message, state: FSMContext):
    old_admin = user_admin_map.get(message.from_user.id)
    if old_admin:
        await bot.send_message(old_admin, "üîÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞.")
        del admin_user_map[old_admin]
        del user_admin_map[message.from_user.id]
    await cmd_start(message, state)

@dp.message_handler(lambda msg: msg.from_user.id in admin_user_map.values(), state='*')
async def admin_stop_chat(message: types.Message):
    if message.text == "‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å":
        user_id = admin_user_map.get(message.from_user.id)
        if user_id:
            await bot.send_message(user_id, "‚ùå –ê–¥–º–∏–Ω –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.")
            del user_admin_map[user_id]
            del admin_user_map[message.from_user.id]
            await message.answer("‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")

@dp.message_handler(lambda msg: msg.from_user.id in user_admin_map, state=UserState.connected)
async def relay_user_message(message: types.Message):
    admin_id = user_admin_map[message.from_user.id]
    await bot.send_message(admin_id, f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
{message.text}")

@dp.message_handler(lambda msg: msg.from_user.id in admin_user_map)
async def relay_admin_message(message: types.Message):
    user_id = admin_user_map[message.from_user.id]
    await bot.send_message(user_id, f"üõ° –ê–¥–º–∏–Ω:
{message.text}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
