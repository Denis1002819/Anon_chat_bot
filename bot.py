import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = '6428099161:AAGrZB9WKRQmjI5dcToFgkJktR_mhG6xU0E'
ADMINS = [6774188449]
ADMIN_GROUP_ID = -1002529705243  # –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π ID –≥—Ä—É–ø–ø—ã

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    chatting = State()

# –ö–Ω–æ–ø–∫–∏
start_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å", callback_data="start_chat"))
user_kb = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_chat"),
    InlineKeyboardButton("üîÅ –°–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="change_admin")
)
admin_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="admin_stop"))

@dp.message_handler(commands="start")
async def start_cmd(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("""üìå –ü—Ä–∞–≤–∏–ª–∞:
1. –ù–∏–∫–∞–∫–æ–≥–æ 18+ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
2. –ë–µ–∑ –≤—ã—è—Å–Ω–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏
3. –û–±—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ
""", reply_markup=start_kb)

@dp.callback_query_handler(lambda c: c.data == "start_chat")
async def start_chat(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.delete()
    await cb.message.answer("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...", reply_markup=user_kb)
    for admin_id in ADMINS:
        await bot.send_message(admin_id, f"üí¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cb.from_user.id}", reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{cb.from_user.id}")
        ))
    await bot.send_message(ADMIN_GROUP_ID, f"üí¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cb.from_user.id}")

@dp.callback_query_handler(lambda c: c.data.startswith("accept_"))
async def accept_chat(cb: types.CallbackQuery, state: FSMContext):
    user_id = int(cb.data.split("_")[1])
    await state.update_data(user=user_id, admin=cb.from_user.id)
    await bot.send_message(cb.from_user.id, f"‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", reply_markup=admin_kb)
    await bot.send_message(user_id, "‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å.")
    await state.set_state(Form.chatting)

@dp.message_handler(state=Form.chatting)
async def chat_flow(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.from_user.id == data.get("admin"):
        await bot.send_message(data["user"], f"üë§ –ê–¥–º–∏–Ω:\n{message.text}", reply_markup=user_kb)
    elif message.from_user.id == data.get("user"):
        await bot.send_message(data["admin"], f"üôã‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n{message.text}", reply_markup=admin_kb)

@dp.callback_query_handler(lambda c: c.data in ["stop_chat", "change_admin", "admin_stop"], state=Form.chatting)
async def stop_chat(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    reason = "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º." if cb.data != "admin_stop" else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º."
    if cb.from_user.id == data.get("user") or cb.from_user.id == data.get("admin"):
        await bot.send_message(data["user"], f"üîí –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.\n{reason}")
        await bot.send_message(data["admin"], f"üîí –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.\n{reason}")
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
