from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
import logging
import asyncio

API_TOKEN = "8139186032:AAG-vUK1grO-R_II8AxCwmb20k-dKYC7bxQ"
ADMIN_GROUP_ID = -1002529705243

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

active_chats = {}
admin_id = None

# –ö–Ω–æ–ø–∫–∏
start_keyboard = InlineKeyboardMarkup().add(
    InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å", callback_data="start_chat")
)
stop_keyboard = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_chat"),
    InlineKeyboardButton("‚ôª –°–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="change_admin")
)
admin_stop_keyboard = InlineKeyboardMarkup().add(
    InlineKeyboardButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_chat")
)

@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    await message.answer(
        "üìå <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n1. –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å.\n2. –ù–µ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=start_keyboard
    )

@dp.callback_query_handler(Text(equals="start_chat"))
async def start_chat(cb: types.CallbackQuery):
    user_id = cb.from_user.id
    await cb.message.edit_text("‚è≥ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    await bot.send_message(
        ADMIN_GROUP_ID,
        f"üí¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üü¢ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}"),
            InlineKeyboardButton("üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}")
        )
    )

@dp.callback_query_handler(lambda c: c.data.startswith("accept_"))
async def accept_request(cb: types.CallbackQuery):
    global admin_id
    user_id = int(cb.data.split("_")[1])
    admin_id = cb.from_user.id
    active_chats[user_id] = admin_id
    active_chats[admin_id] = user_id

    await bot.send_message(user_id, "‚úÖ –ê–¥–º–∏–Ω –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É. –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å.", reply_markup=stop_keyboard)
    await bot.send_message(admin_id, f"üîó –°–≤—è–∑—å —Å <code>{user_id}</code> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=admin_stop_keyboard)
    await cb.message.edit_text("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω.")

@dp.callback_query_handler(lambda c: c.data.startswith("decline_"))
async def decline_request(cb: types.CallbackQuery):
    user_id = int(cb.data.split("_")[1])
    await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await cb.message.edit_text("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

@dp.callback_query_handler(Text(equals="stop_chat"))
async def stop_chat(cb: types.CallbackQuery):
    user_id = cb.from_user.id
    target_id = None

    for uid, aid in active_chats.items():
        if uid == user_id:
            target_id = aid
            break
        elif aid == user_id:
            target_id = uid
            break

    if target_id:
        await bot.send_message(target_id, "üö´ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.")
        if user_id in active_chats:
            del active_chats[user_id]
        if target_id in active_chats:
            del active_chats[target_id]

    await cb.message.edit_text("üîï –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.")

@dp.callback_query_handler(Text(equals="change_admin"))
async def change_admin(cb: types.CallbackQuery):
    user_id = cb.from_user.id
    if user_id in active_chats:
        target_id = active_chats[user_id]
        del active_chats[user_id]
        if target_id in active_chats:
            del active_chats[target_id]
        await bot.send_message(target_id, "üîÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª –∞–¥–º–∏–Ω–∞.")
        await cb.message.edit_text("üîÑ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —á–∞—Ç. –ú–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å ¬´–ù–∞—á–∞—Ç—å¬ª —Å–Ω–æ–≤–∞.")
        await bot.send_message(user_id, "üí¨ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", reply_markup=start_keyboard)
    else:
        await cb.message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.")

@dp.message_handler()
async def relay_message(msg: types.Message):
    user_id = msg.from_user.id
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        try:
            if msg.text:
                await bot.send_message(partner_id, msg.text)
            elif msg.photo:
                await bot.send_photo(partner_id, msg.photo[-1].file_id, caption=msg.caption)
            elif msg.document:
                await bot.send_document(partner_id, msg.document.file_id, caption=msg.caption)
            elif msg.sticker:
                await bot.send_sticker(partner_id, msg.sticker.file_id)
            elif msg.voice:
                await bot.send_voice(partner_id, msg.voice.file_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

